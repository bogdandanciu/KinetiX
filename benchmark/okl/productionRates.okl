@kernel void productionRates(const int n_states,
                             const int offsetT,
                             const int offset,
                             const double pressure_R,
                             const double pressure_,
                             @restrict const dfloat* state,
                             @restrict dfloat* rates,
                             const double Tref)
{
  for(int id = 0; id < n_states; ++id; @tile(p_BLOCKSIZE,@outer,@inner)) {
    const cfloat T = Tref * state[id];
    const cfloat rcpT = 1 / T;
    const cfloat logT = log(T);
    const cfloat T2 = T * T;
    const cfloat T3 = T * T * T;
    const cfloat T4 = T * T * T * T;
    const cfloat P  = pressure_;
    const cfloat logP = log(pressure_);

    cfloat wrk1[__KINETIX_NSPECIES__];

    cfloat Mbar;
    {
      cfloat rcpMbar = 0;

      for(int k = 0; k < __KINETIX_NSPECIES__; k++) {
        const cfloat Yi = __KINETIX_MAX((cfloat) 0, (cfloat) state[id + offsetT + k*offset]);
        wrk1[k] = Yi * kinetix_rcp_molar_mass[k];
        rcpMbar += wrk1[k];
      }
      Mbar = 1/rcpMbar; 
    }

    {
      cfloat wrk2[__KINETIX_NSPECIES__];
      const cfloat rho = pressure_R * rcpT * Mbar;
      for(int k = 0; k < __KINETIX_NSPECIES__; k++) {
        const cfloat Ci = wrk1[k] * rho;
        wrk1[k] = Ci; 
        wrk2[k] = 0;
      }
      if (p_PELETOOL){
        productionRate(wrk2, wrk1, T);
      } else {
        kinetix_species_rates(logT,T,T2,T3,T4,rcpT,P,logP,wrk1,wrk2);
      }

      for(int k = 0; k < __KINETIX_NSPECIES__; k++) {
        rates[id + offsetT + k*offset] = kinetix_molar_mass[k] * wrk2[k];
      }

      if (p_PELETOOL) {
        speciesEnthalpy(wrk1, T);
      } else {
        kinetix_enthalpy_RT(T,T2,T3,T4,rcpT,wrk1);
      }
      cfloat sum_h_RT = 0;
      for(int k = 0; k < __KINETIX_NSPECIES__; k++) {
        sum_h_RT += wrk2[k] * wrk1[k];
      }
      cfloat ratesFactorEnergy = -p_R*T;
      rates[id] = ratesFactorEnergy * sum_h_RT;
    }
  }
}
